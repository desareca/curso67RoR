Fundamentos Intermedios

1. Sigma - Implementa una función sigma(num) que, dado un número, devuelve la suma de todos los enteros positivos (incluyendo el número dado). Ej: sigma(3) = 6 (1+2+3); sigma(5) = 15 (1+2+3+4+5).

function sigma(x){
    var suma=0;
    for(var i=0; i<=x; i++){
         suma = suma + i;
    }
    return suma;
}


------------------------------------------------------------------------------------------------------
2. Factorial - Escribe una función factorial(num) que, dado un número, devuelva el producto (multiplicación) de todos los enteros positivos (incluyendo el número dado). Por ejemplo: factorial(3) = 6 (1*2*3); factorial(5) = 120 (1*2*3*4*5).

function factorial(x){
    var mult=1;
    for(var i=1; i<=x; i++){
         mult = mult*i;
    }
    return mult;
}


------------------------------------------------------------------------------------------------------
3. Fibonacci - Crea una función para generar números de Fibonacci. En esta famosa secuencia matemática, cada número es la suma de las dos anteriores, partiendo con los valores 0 y 1. Tu función debería aceptar un argumento, un índice en la secuencia (donde 0 corresponde al valor inicial, 4 corresponden al valor cuatro más tarde, etc). Ejemplos: fibonacci(0) = 0 (dado), fibonacci(1) = 1 (dado), fibonacci(2) = 1 (fib(0)+fib(1), o 0+1), fibonacci(3) = 2 (fib(1) + fib(2)3, o 1+1), fibonacci(4) = 3 (1+2), fibonacci(5) = 5 (2+3), fibonacci(6) = 8 (3+5), fibonacci(7) = 13 (5+8). Haz esto primero sin usar recursión. Si no sabes qué es una recursión, no te preocupes puesto que vamos a introducir este concepto en la Parte 2 de esta actividad. 

function fibonacci(n){
    var fib_0 = 0;
    var fib_1 = 1;
    if(n==0){
        return(fib_0);
    }
    if(n==1){
        return(fib_1);
    } 
    for(var i=2; i<=n; i++){
        fib = fib_0 + fib_1;
        fib_0 = fib_1;
        fib_1 = fib;
    }
    return(fib);
}


------------------------------------------------------------------------------------------------------
4. Array: Penúltimo: Devuelve el penúltimo elemento del array. Dado [42,true,4,”Liam”, 7] devuelve “Liam”. Si el array es muy pequeño, devuelve null.  

function penultimo(x){
    if(x.length>=2){
        return x[x.length-2];
    }
    if(x.length<2){
        return(null);
    }
}


------------------------------------------------------------------------------------------------------
5. Array: “N” último: Devuelve el elemento “N” último. Dado ([5,2,3,6,4,9,7],3], devuelve 6. Si el array es muy pequeño, devuelve null. 

function ultimo(x,n){
    if(x.length>n){
        return x[n];
    }
    if(x.length<=n){
        return null ;
    }
}

------------------------------------------------------------------------------------------------------
6. Array: Segundo más grande: Devuelve el segundo elemento más grande de un array. Dado [42,1,4,3.14,7], devuelve 7.  Si el array es muy pequeño, devuelve null.


function segMax(arr){
  if(arr.length>=2){
      function orden(y, id1, id2){
          var temp= y[id1] 
          y[id1] = y[id2];
          y[id2] = temp;
          return y;
      }
      for(var pass = 1; pass<arr.length; pass++ ){
          for(var left = 0; left<(arr.length-pass); left++){
              var right = left + 1;
              if(arr[left] < arr[right]){
                  orden(arr, left, right);
              }
          }
      }
      return arr[1];
  }
  if(arr.length<2){
      return null;
  }
}

------------------------------------------------------------------------------------------------------
7. Doble Problema Par: Crea una función que cambie un array dado duplicando cada uno de sus elementos y manteniendo el orden original. Convierte [4, "Ulysses", 42, false]   a    [4,4, "Ulysses", "Ulysses", 42, 42, false, false].


function doblePar(arr){
    var x=[];
    for(var i=0; i<arr.length; i++){
        x.push(arr[i]);
        x.push(arr[i]);
    }
    return(x);
}




